import math

def clean_text(text):
    """
    Limpia el texto eliminando espacios y convirtiendo a may√∫sculas.
    Esto asegura uniformidad en el cifrado.
    """
    return ''.join(text.upper().split())

def create_transposition_matrix(text, key, fill_char='X'):
    """
    Crea una matriz para la transposici√≥n en columnas seg√∫n la longitud de la clave.
    El texto se rellena con un car√°cter (por defecto 'X') si no llena completamente la matriz.
    """
    columns = len(key)
    rows = math.ceil(len(text) / columns)
    padded_text = text.ljust(rows * columns, fill_char)  # Rellenar con 'X' si es necesario

    # Crear la matriz dividiendo el texto en filas
    matrix = [list(padded_text[i:i + columns]) for i in range(0, len(padded_text), columns)]
    return matrix

def encrypt(text, key):
    """
    Cifra el texto usando transposici√≥n por columna simple.
    Se ordenan las columnas seg√∫n el orden alfab√©tico de la clave.
    """
    text = clean_text(text)
    matrix = create_transposition_matrix(text, key)

    # Obtener el orden de las columnas basado en la clave
    key_order = sorted(list(enumerate(key)), key=lambda x: x[1])

    cipher = ''
    # Leer las columnas en orden de la clave ordenada alfab√©ticamente
    for index, _ in key_order:
        for row in matrix:
            cipher += row[index]
    return cipher

def decrypt(ciphertext, key):
    """
    Descifra el texto cifrado utilizando la clave.
    Se reconstruye la matriz original y se lee fila por fila.
    """
    key_len = len(key)
    rows = math.ceil(len(ciphertext) / key_len)
    total_cells = rows * key_len

    # Inicializar columnas vac√≠as
    cols = [''] * key_len

    # Orden alfab√©tico de la clave
    sorted_key = sorted(list(enumerate(key)), key=lambda x: x[1])

    # Determinar cu√°ntos caracteres va en cada columna
    col_lengths = [rows] * key_len
    extra_chars = total_cells - len(ciphertext)

    # Ajustar columnas que deben tener un car√°cter menos
    for i in range(extra_chars):
        col_lengths[sorted_key[-(i+1)][0]] -= 1

    # Llenar las columnas seg√∫n el texto cifrado
    pos = 0
    for index, _ in sorted_key:
        length = col_lengths[index]
        cols[index] = list(ciphertext[pos:pos + length])
        pos += length

    # Leer la matriz fila por fila para reconstruir el mensaje original
    plaintext = ''
    for i in range(rows):
        for j in range(key_len):
            if i < len(cols[j]):
                plaintext += cols[j][i]
    return plaintext

def save_to_file(text, filename='output.txt'):
    """
    Guarda el resultado del cifrado o descifrado en un archivo .txt
    """
    with open(filename, 'w') as f:
        f.write(text)
    print(f"[‚úì] Mensaje guardado en {filename}")

def main():
    """
    Funci√≥n principal del programa. Permite seleccionar entre cifrar o descifrar,
    ingresar texto, clave, y decidir si guardar el resultado en un archivo o mostrarlo.
    """
    print("üîê Cifrado por Transposici√≥n de Columna Simple")
    option = input("¬øQu√© deseas hacer? (cifrar/descifrar): ").strip().lower()
    text = input("Introduce el mensaje: ")
    key = input("Introduce la clave (sin espacios): ").strip().upper()

    if option == 'cifrar':
        result = encrypt(text, key)
    elif option == 'descifrar':
        result = decrypt(text, key)
    else:
        print("‚ùå Opci√≥n no v√°lida.")
        return

    output_option = input("¬øDeseas guardar el resultado en un archivo? (s√≠/no): ").strip().lower()
    if output_option in ['s√≠', 'si', 's']:
        save_to_file(result)
    else:
        print(f"\nüîé Resultado:\n{result}")

# Punto de entrada del programa
if __name__ == "__main__":
    main()
